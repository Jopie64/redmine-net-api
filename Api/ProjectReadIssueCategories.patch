Index: Api.csproj
===================================================================
--- Api.csproj	(revision 115)
+++ Api.csproj	(working copy)
@@ -108,6 +108,7 @@
     <Compile Include="Types\News.cs" />
     <Compile Include="Types\Permission.cs" />
     <Compile Include="Types\Project.cs" />
+    <Compile Include="Types\ProjectIssueCategory.cs" />
     <Compile Include="Types\ProjectMembership.cs" />
     <Compile Include="Types\ProjectTracker.cs" />
     <Compile Include="Types\Query.cs" />
Index: JSonConverters/ProjectConverter.cs
===================================================================
--- JSonConverters/ProjectConverter.cs	(revision 115)
+++ JSonConverters/ProjectConverter.cs	(working copy)
@@ -42,7 +42,7 @@
                 project.Trackers = dictionary.GetValueAsCollection<ProjectTracker>("trackers");
                 project.CustomFields = dictionary.GetValueAsCollection<CustomField>("custom_fields");
                 project.Parent = dictionary.GetValueAsIdentifiableName("parent");
-                project.IssueCategories = dictionary.GetValueAsCollection<IssueCategory>("issue_categories");
+                project.IssueCategories = dictionary.GetValueAsCollection<ProjectIssueCategory>("issue_categories");
                 return project;
             }
 
Index: Types/Project.cs
===================================================================
--- Types/Project.cs	(revision 115)
+++ Types/Project.cs	(working copy)
@@ -94,7 +94,7 @@
 
         [XmlArray("issue_categories")]
         [XmlArrayItem("issue_category")]
-        public IList<IssueCategory> IssueCategories { get; set; } 
+        public IList<ProjectIssueCategory> IssueCategories { get; set; } 
 
         /// <summary>
         /// Generates an object from its XML representation.
@@ -133,7 +133,7 @@
 
                     case "custom_fields": CustomFields = reader.ReadElementContentAsCollection<CustomField>(); break;
 
-                    case "issue_categories": IssueCategories = reader.ReadElementContentAsCollection<IssueCategory>(); break;
+                    case "issue_categories": IssueCategories = reader.ReadElementContentAsCollection<ProjectIssueCategory>(); break;
                     default: reader.Read(); break;
                 }
             }
Index: Types/ProjectIssueCategory.cs
===================================================================
--- Types/ProjectIssueCategory.cs	(revision 0)
+++ Types/ProjectIssueCategory.cs	(working copy)
@@ -0,0 +1,39 @@
+ï»¿/*
+   Copyright 2011 - 2013 Adrian Popescu, Dorin Huzum.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+*/
+
+using System;
+using System.Xml.Serialization;
+
+namespace Redmine.Net.Api.Types
+{
+    /// <summary>
+    /// 
+    /// </summary>
+    [XmlRoot("issue_category")]
+    public class ProjectIssueCategory : IdentifiableName, IEquatable<ProjectTracker>
+    {
+        public bool Equals(ProjectTracker other)
+        {
+            if (other == null) return false;
+            return Id == other.Id && Name == other.Name;
+        }
+
+        public override string ToString()
+        {
+            return Id + ", " + Name;
+        }
+    }
+}
\ No newline at end of file
